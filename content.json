[{"title":"JDBC（基础整理）","date":"2016-12-11T07:00:39.000Z","path":"2016/12/11/JDBC/","text":"Java Database Connection:java数据库连接技术。 四种连接方式（只写两种）： 1 桥连： JDBC-ODBC连接。 2 直连： 直接通过JDBC驱动连接数据库。 JDBC中的核心接口与类三个核心接口Connection接口：连接数据库接口。负责与数据库之间的连接。 Statement接口：操作数据库接口，常用的子接口PreparedStatement接口，预处理SQL语句。负责执行CRUD命令。 获得Statement对象 ​ Statement stat = conn.createStatement(); ​ 执行查询的方法： ResultSet rs = stat.executeQuery(SQL); ​ 执行增删改的方法: ​ int i = stat.executeUpdate(SQL); ResultSet接口：结果集接口。负责接收查询的结果。 结果集对象下移一条时调用方法 next(); ​ 两个值：BOF , EOF ​ BOF：第一行的前面。rs对象一开始指向的位置就是BOF。 ​ EOF：最后一行的后面。rs对象的next方法是下移一行，如果移动之 后指向了EOF返回false，表示没有记录 12345678910111213141516171819202122232425262728293031323334import java.sql.Connection;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.Statement;import java.util.Date;public class Test &#123; public static void main(String[] args) throws Exception &#123; //连接数据库的四大参数项 String username = &quot;scott&quot;; String password = &quot;tiger&quot;; String driver_class=&quot;oracle.jdbc.driver.OracleDriver&quot;;//驱动类名称 String url = &quot;jdbc:oracle:thin:@localhost:1521:XE&quot;;//连接字符串// 1、加载JDBC的驱动-连接哪个数据库产品就加载哪个数据库的JDBC驱动 Class.forName(driver_class);// 2、创建与数据库之间的连接 Connection conn = DriverManager.getConnection(url, username , password);// 3、执行CRUD命令 String sql = &quot;select * from emp&quot;; Statement stat = conn.createStatement();// 4、如果是查询就处理结果集 ResultSet rs = stat.executeQuery(sql); //rs是结果集对象，结果集就是一个二维表格。 while(rs.next())&#123;//下一行。如果返回true说明有记录。 int empno = rs.getInt(1); String ename = rs.getString(&quot;ename&quot;); Date date = rs.getDate(&quot;hiredate&quot;); System.out.println(empno+&quot;:&quot;+ename+&quot;:&quot;+date); &#125;// 5、关闭连接，释放资源 rs.close(); stat.close(); conn.close(); &#125;&#125; 对数据库进行增删改操作 12345678910111213141516171819202122232425262728293031import java.sql.Connection;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.Statement;import java.util.Date;public class UpdateTest &#123; public static void main(String[] args) throws Exception &#123; //连接数据库的四大参数项 String username = &quot;scott&quot;; String password = &quot;tiger&quot;; String driver_class=&quot;oracle.jdbc.driver.OracleDriver&quot;;//驱动类名称 String url = &quot;jdbc:oracle:thin:@localhost:1521:XE&quot;;//连接字符串// 1、加载JDBC的驱动-连接哪个数据库产品就加载哪个数据库的JDBC驱动 Class.forName(driver_class);// 2、创建与数据库之间的连接 Connection conn = DriverManager.getConnection(url, username , password); System.out.println(conn);// 3、执行CRUD命令 String sql = &quot;insert into dept(deptno,dname,loc) values(50 , &apos;总部&apos; ,&apos;北京远洋&apos;)&quot;; Statement stat = conn.createStatement(); int count = stat.executeUpdate(sql);//增删改都调用这个方法 if(count &gt; 0) &#123; System.out.println(&quot;操作成功！&quot;); &#125;// 7.5、关闭连接，释放资源 stat.close(); conn.close(); &#125;&#125; PreparedStatement接口：Statement子接口，预处理SQL语句。 创建PreparedStatement接口的实例String sql = “insert into dept(deptno,dname,loc) values(?,?,?)”;//可以使用?占位符 PreparedStatementpstat = conn.prepareStatement(sql); //为占位符赋值 pstat.setInt(1, deptno); pstat.setString(2, dname); pstat.setString(3, loc); 执行 pstat.executeUpdate(); 数据库连接池技术世面上主流有:DBCP , C3P0使用DBCP创建数据库连接对象设置DBCP连接池参数 创建一个资源文件.properteis。 12345678910111213driverClassName=oracle.jdbc.driver.OracleDriver url=jdbc:oracle:thin:@localhost:1521:XE username=scott password=tiger maxActive=50--最大活动数量 maxIdle=20 --最大空闲数量 maxWait=60000 --最大等待时间，毫秒。 ##","tags":[{"name":"JDBC","slug":"JDBC","permalink":"http://yoursite.com/tags/JDBC/"}]},{"title":"java Throwable（基础整理）","date":"2016-12-11T06:46:31.000Z","path":"2016/12/11/java-Throwable/","text":"Throwable Thorwable类所有异常和错误的超类，有两个子类Error和Exception，分别表示错误和异常。 其中异常类Exception又分为运行时异常(RuntimeException)和非运行时异常， 这两种异常有很大的区别，也称之为不检查异常（Unchecked Exception）和检查异常（Checked Exception）。 Error与ExceptionError是程序无法处理的错误，比如OutOfMemoryError、ThreadDeath等。这些异常发生时， Java虚拟机（JVM）一般会选择线程终止。Exception是程序本身可以处理的异常，这种异常分两大类运行时异常和非运行时异常 运行时异常都是RuntimeException类及其子类异常，如NullPointerException、IndexOutOfBoundsException等， 非运行时异常是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。 如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。 throw、throws关键字throw关键字是用于方法体内部，用来抛出一个Throwable类型的异常。如果抛出了检查异常， 如果所有方法都层层上抛获取的异常，最终JVM会进行处理，处理也很简单，就是打印异常消息和堆栈信息 如果抛出的是Error或RuntimeException，则该方法的调用者可选择处理该异常。 throws关键字用于方法体外部的方法声明部分，用来声明方法可能会抛出某些异常。仅当抛出了检查异常，当方法的调用者无力处理该异常的时候，应该继续抛出 1234public static void test() throws Exception&#123; //抛出一个检查异常 throw new Exception(&quot;方法test中的Exception&quot;); &#125;","tags":[{"name":"throwable","slug":"throwable","permalink":"http://yoursite.com/tags/throwable/"}]},{"title":"java collection接口（基础整理）","date":"2016-12-11T02:49:39.000Z","path":"2016/12/11/java-API/","text":"集合的整体的框架结构转自 在整个集合框架中顶层的接口：Collection接口。 在Collection接口下有两个子接口List 和Set 在整个集合框架中还有一个接口Map Collection├List│├LinkedList│├ArrayList│└Vector│ └Stack└SetMap├Hashtable├HashMap└WeakHashMap Collection是最基本的集合接口，一个Collection代表一组Object，即Collection的元素（Elements） 所有实现Collection接口的类都必须提供两个标准的构造函数：无参数的构造函数用于创建一个空的Collection，有一个 Collection参数的构造函数用于创建一个新的Collection，这个新的Collection与传入的Collection有相同的元素。后 一个构造函数允许用户复制一个Collection。 如何遍历Collection中的每一个元素？不论Collection的实际类型如何，它都支持一个iterator()的方法，该方法返回一个迭代子，使用该迭代子即可逐一访问Collection中每一个元素。典型的用法如下： Iterator it = collection.iterator(); // 获得一个迭代子 while(it.hasNext()) { Object obj = it.next(); // 得到下一个元素 } 由Collection接口派生的两个接口是List和Set。 List接口 List是有序的Collection，使用此接口能够精确的控制每个元素插入的位置。用户能够使用索引（元素在List中的位置，类似于数组下标）来访问List中的元素，这类似于Java的数组。和下面要提到的Set不同，List允许有相同的元素。 除了具有Collection接口必备的iterator()方法外，List还提供一个listIterator()方法，返回一个 ListIterator接口，和标准的Iterator接口相比，ListIterator多了一些add()之类的方法，允许添加，删除，设定元素， 还能向前或向后遍历。 实现List接口的常用类有LinkedList，ArrayList，Vector和Stack。 LinkedList类 LinkedList实现了List接口，允许null元素。此外LinkedList提供额外的get，remove，insert方法在 LinkedList的首部或尾部。这些操作使LinkedList可被用作堆栈（stack），队列（queue）或双向队列（deque）。 注意LinkedList没有同步方法。如果多个线程同时访问一个List，则必须自己实现访问同步。一种解决方法是在创建List时构造一个同步的List： List list = Collections.synchronizedList(new LinkedList(…)); ArrayList类 ​ ArrayList实现了可变大小的数组。它允许所有元素，包括null。ArrayList没有同步。 size，isEmpty，get，set方法运行时间为常数。但是add方法开销为分摊的常数，添加n个元素需要O(n)的时间。其他的方法运行时间为线性。 每个ArrayList实例都有一个容量（Capacity），即用于存储元素的数组的大小。这个容量可随着不断添加新元素而自动增加，但是增长算法 并没有定义。当需要插入大量元素时，在插入前可以调用ensureCapacity方法来增加ArrayList的容量以提高插入效率。 和LinkedList一样，ArrayList也是非同步的（unsynchronized）。 Vector类 ​ Vector非常类似ArrayList，但是Vector是同步的。由Vector创建的Iterator，虽然和 ArrayList创建的Iterator是同一接口，但是，因为Vector是同步的，当一个Iterator被创建而且正在被使用，另一个线程改变了 Vector的状态（例如，添加或删除了一些元素），这时调用Iterator的方法时将抛出 ConcurrentModificationException，因此必须捕获该异常。 Stack 类 Stack继承自Vector，实现一个后进先出的堆栈。Stack提供5个额外的方法使得Vector得以被当作堆栈使用。基本的push和pop 方法，还有peek方法得到栈顶的元素，empty方法测试堆栈是否为空，search方法检测一个元素在堆栈中的位置。Stack刚创建后是空栈。 Set接口 Set是一种不包含重复的元素的Collection，即任意的两个元素e1和e2都有e1.equals(e2)=false，Set最多有一个null元素。 很明显，Set的构造函数有一个约束条件，传入的Collection参数不能包含重复的元素。 请注意：必须小心操作可变对象（Mutable Object）。如果一个Set中的可变元素改变了自身状态导致Object.equals(Object)=true将导致一些问题。 hashset类HashSet 的实现其实非常简单，它只是封装了一个 HashMap 对象来存储所有的集合元素，所有放入 HashSet 中的集合元素实际上由 HashMap 的 key 来保存，而 HashMap 的 value 则存储了一个 PRESENT，它是一个静态的 Object 对象。 Map接口 Map没有继承Collection接口，Map提供key到value的映射。一个Map中不能包含相同的key，每个key只能映射一个 value。Map接口提供3种集合的视图，Map的内容可以被当作一组key集合，一组value集合，或者一组key-value映射。 Hashtable类Hashtable继承Map接口，实现一个key-value映射的哈希表。任何非空（non-null）的对象都可作为key或者value。 添加数据使用put(key, value)，取出数据使用get(key)，这两个基本操作的时间开销为常数。 使用Hashtable的简单示例如下，将1，2，3放到Hashtable中，他们的key分别是”one”，”two”，”three”： Hashtable numbers = new Hashtable(); numbers.put(“one”, new Integer(1)); numbers.put(“two”, new Integer(2)); numbers.put(“three”, new Integer(3)); 要取出一个数，比如2，用相应的key： Integer n = (Integer)numbers.get(“two”); 由于作为key的对象将通过计算其散列函数来确定与之对应的value的位置，因此任何作为key的对象都必须实现hashCode和equals方 法。hashCode和equals方法继承自根类Object，如果你用自定义的类当作key的话，要相当小心，按照散列函数的定义，如果两个对象相 同，即obj1.equals(obj2)=true，则它们的hashCode必须相同，但如果两个对象不同，则它们的hashCode不一定不同，如 果两个不同对象的hashCode相同，这种现象称为冲突，冲突会导致操作哈希表的时间开销增大，所以尽量定义好的hashCode()方法，能加快哈希 表的操作。 如果相同的对象有不同的hashCode，对哈希表的操作会出现意想不到的结果（期待的get方法返回null），要避免这种问题，只需要牢记一条：要同时复写equals方法和hashCode方法，而不要只写其中一个。 Hashtable是同步的。 HashMap类 HashMap和Hashtable类似，不同之处在于HashMap是非同步的，并且允许null，即null value和null key。，但是将HashMap视为Collection时（values()方法可返回Collection），其迭代子操作时间开销和HashMap 的容量成比例 总结 如果涉及到堆栈，队列等操作，应该考虑用List，对于需要快速插入，删除元素，应该使用LinkedList，如果需要快速随机访问元素，应该使用ArrayList。 如果程序在单线程环境中，或者访问仅仅在一个线程中进行，考虑非同步的类，其效率较高，如果多个线程可能同时操作一个类，应该使用同步的类。 要特别注意对哈希表的操作，作为key的对象要正确复写equals和hashCode方法。 尽量返回接口而非实际的类型，如返回List而非ArrayList，这样如果以后需要将ArrayList换成LinkedList时，客户端代码不用改变。这就是针对抽象编程。 相互区别Vector和ArrayList 1，vector是线程同步的，所以它也是线程安全的，而arraylist是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用 arraylist效率比较高。2，如果集合中的元素的数目大于目前集合数组的长度时，vector增长率为目前数组长度的100%,而arraylist增长率为目前数组长度 的50%.如过在集合中使用数据量比较大的数据，用vector有一定的优势。3，如果查找一个指定位置的数据，vector和arraylist使用的时间是相同的，都是0(1),这个时候使用vector和arraylist都可以。而 如果移动一个指定位置的数据花费的时间为0(n-i)n为总长度，这个时候就应该考虑到使用linklist,因为它移动一个指定位置的数据 所花费的时间为0(1),而查询一个指定位置的数据时花费的时间为0(i)。 ArrayList 和Vector是采用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，都允许直接序号索引元素，但是插入数据要设计到数组元素移动 等内存操作，所以索引数据快插入数据慢，Vector由于使用了synchronized方法（线程安全）所以性能上比ArrayList要 差，LinkedList使用双向链表实现存储，按序号索引数据需要进行向前或向后遍历，但是插入数据时只需要记录本项的前后项即可，所以插入数度较快！ arraylist和linkedlist 1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。 这一点要看实际情况的。若只对单条数据插入或删除，ArrayList的速度反而优于LinkedList。但若是批量随机的插入删除数 据，LinkedList的速度大大优于ArrayList. 因为ArrayList每插入一条数据，要移动插入点及之后的所有数据。 HashMap与TreeMap (注) 文章出处：http://www.diybl.com/course/3_program/java/javaxl/200875/130233.html 1、HashMap通过hashcode对其内容进行快速查找，而TreeMap中所有的元素都保持着某种固定的顺序，如果你需要得到一个有序的结果你就应该使用TreeMap（HashMap中元素的排列顺序是不固定的）。 2, 、在Map 中插入、删除和定位元素，HashMap 是最好的选择。但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。使用HashMap要求添加的键类明确定义了hashCode()和 equals()的实现。 这个TreeMap没有调优选项，因为该树总处于平衡状态。 hashtable与hashmap 一.历史原因:Hashtable是基于陈旧的Dictionary类的，HashMap是Java 1.2引进的Map接口的一个实现 二.同步性:Hashtable是线程安全的，也就是说是同步的，而HashMap是线程序不安全的，不是同步的 三.值：只有HashMap可以让你将空值作为一个表的条目的key或value","tags":[{"name":"API","slug":"API","permalink":"http://yoursite.com/tags/API/"}]},{"title":"java oop（基础整理）","date":"2016-12-11T01:58:25.000Z","path":"2016/12/11/java-oop/","text":"JavaBean规范1 类一定要有默认构造方法。 2 属性要private。 3 通过public的方法来操作属性。 final修饰符可以修饰三个对象 1 变量：局部变量，常量，值不可改变。 类中的属性： 1 属性可以初始化，但不能通过set方法赋值。 2 属性的初始化一定要使用类的构造方法，所以默认构造方法不可 用。 基本数据类型：值不可改变。 引用数据类型：引用不可改变。 2方法：方法不可改变。方法不能被重写。 3类：类不可改变。类不能被继承。 static修饰符叫静态修饰符。 1 代码块：静态代码块，静态块。 代码块：{ } 静态代码块：static{ } 给静态属性初始化用的。 2 属性：静态属性 没加的static的属性叫实例属性。是实例的。 加了static叫静态属性，也叫类属性。是类的。 静态方法只可以访问静态属性和静态方法。 abstract修饰符Abstract中文叫抽象。 可以修饰二个地方：方法和类。 6.1 抽象方法：使用abstract修饰符修饰的方法。 抽象方法有自己的固定格式：没有方法体。 抽象类：类前面加abstract修饰符的类,叫抽象类。 一个类中如果有抽象方法，这个类必须是抽象类。 在一个抽象类中可以有属性，方法，抽象方法，但也可不存在抽象方法。 抽象类不能被实例化。 抽象类在使用时一定要做为父类，让子类继承，重写抽象方法。 接口（interface）1 公有静态常量，publicstatic final 2 公有抽象方法，抽象方法的修饰符abstract。但是在接口中只能有抽象方法，在接口可以省略abstract 使用1 不能被new，实例化。 2 一定要找一个类，去实现接口。关键字implements 在实现类中一定要对接口中声明的抽象方法给出具体的实现。重写接口中的抽象方法。 4 当实现类中不能将接口中所有的抽象方法全部给出实现时，这个实现类就必须是抽象类。 5 接口同样支持面向对象的多态这个特性。 接口类型的引用可以指向一个其实现类的实例。 接口类型 接口类型引用 = new 实现类（）; 6 一个类只能继承自一个父类。Extends 类 只能有一个。Java是一种单继承的语言。 7 一个类可以实现多个接口。Implements 接口1，接口2 8 一个类可以同时继承一个父类，再同时实现多个接口。 this关键字在实例内部代表实例本身的一个引用。一般在参数名称与属性名称一致时，用来区分哪个是属性用的。在属性前面加上”this.” this关键字在实例内部可以调用三个内容： 1属性：调用实例本身自己的属性。 this.属性名 2方法：调用实例本身自己的方法。 this.方法名（）; 3构造方法：调用实例本身自己的构造方法。 this(); 只能写在构造方法中。 只能写在构造方法的第一行 构造方法构造方法是一个特殊的方法。 1 方法名称必须与类名一致。完全一致。大小写都要一致。 2 方法没有返回类型说明。注意不是没有返回值，是没有返回类型的说明。 构造方法是在new时（实例化），由系统自动调用的方法。（在实例化一个类的对象的过程中一同类同名不同参： 在一个类中有多个同名的方法，但是方法的参数不同时，把这几个同名的方法叫方法重载。 参数不同包含： 1参数个数。 2参数类型。 构造方法也是方法，所以构造方法也可以重载。定要调用构造方法） 构造方法的作用是用来构造实例并初始化属性。 方法重载 同类同名不同参： 在一个类中有多个同名的方法，但是方法的参数不同时，把这几个同名的方法叫方法重载。 参数不同包含 ​ 1参数个数。 2参数类型。 构造方法也是方法，所以构造方法也可以重载。 面向对象的三大特性-封装，继承，多态封装的目的是为了实现模块化开发。 具体体现方式：封装的目的是为了获得类和方法。 访问修饰符private : 私有，只能类内使用。子类不能访问。 （default）：默认，包级别，本类和同包可用。 protected：保护，同包和子类。 public ： 公有，任何位置都可以访问 继承的特点子类可以复用父类中的属性和方法。（必须参考访问修饰符，如果属性或方法是以private修饰时，在子类中不能使用父类的方法了。）继承不是单纯的代码复制。会为这个子类在创建子类实例时同时也创建一个属于这个子类实例的父类实例。 Java会为每个子类实例都关联一个父类实例。 方法重写(Override)两个类要有继承关系。 在子类重新编写相同的方法。方法名称，返回类型，参数都必须相同。 我们就叫方法重写 super关键字在实例内部引用其父类实例的一个引用。使用super关键字可以调用父类的属性和方法。 关于super常见的用法 1super.父类方法（）; 调用父类的方法。一般在子类重写的方法中调用父类的方法。 ​ 2 super（）; 调用父类的构造方法。只能在子类的构造方法的第一行出现。用来明确指定调用父类的哪个构造方法。 在没有多态时，使用继承的目的是为了代码复用。 在没有多态时，使用继承的目的是为了修改现有类，创建新类。 多态（是面向对象语言的最核心的特性）多态的基础： 1 要有继承：extends 2要有方法重写：在子类中重写父类继承的方法。声明一个与父类一样的方法。但是方法的内容可以重新写。 多态的格式：父类引用指向子类实例 父类类型 父类引用 = new 子类类型(); ​ 父类引用指向了一个子类的实例时，父类引用可以调用二类方法。 1父类中声明的自己的方法。 2 子类中重写父类的方法。 多态的一般使用方法的格式：1将父类引用做为方法的形参。 2将子类实例做为方法的实参。","tags":[{"name":"javaoop","slug":"javaoop","permalink":"http://yoursite.com/tags/javaoop/"}]},{"title":"java基础整理","date":"2016-12-11T01:31:16.000Z","path":"2016/12/11/java1/","text":"垃圾回收JAVA程序运行过程中，有一个线程叫垃圾回收线程。程序运行了一时间之后很多垃圾信息。回收。 自动调用。程序员不能控制。1 内存不够。2 CPU空闲。 垃圾：没有被引用的内存空间。 java运行机制Java先编译后解释型语言。 源文件(.java)----编译-&gt;类文件(.class)（字节码文件）---解释执行（JVM：java虚拟机）---&gt;机器指令 JDK(Java Development Kit) Java开发工具包 JDK = JRE + 工具（编译器、调试器、其他工具……） + 类库 JRE (Java Runtime Environment) Java运行时环境 JRE = JVM(Java Virtual Machine) Java虚拟机+解释器 原始数据类型就只有8个：byte,short,int,long float,double char boolean String字符串数据类型String实际上它是一个类, 字符串不变性：表示字符串字面量是不会改变的。 字符串常量池。用来存放字符串常量 数组数组就是保存同一类型的一大堆的变量。 声明一个数组。 int[] a; 推荐使用。 数组的异常- ArrayIndexOutOfBoundsException（索引超出范围） 数组是引用数据类型 当一个数组给另一个数组，使用数组名称赋值时，实际上是将数组的引用交给另一个数组。 两个数组使用的是同一块内存，两个数组引用是相同的。 所以一个数组对数组元素的修改等于两个数组一起改变。 java.util.Arrays类。封装了针对数组的操作方法。 sort。排序方法。sort(byte[] a)对指定的 byte 型数组按数字升序进行排序。 binarySearch(int[]a,int key) 使用二分搜索法来搜索指定的 int 型数组，以获得指定的值。必须在进行此调用之前对数组进行排序。如果没有对数组进行排序，则结果是不确定的。如果数组包含多个带有指定值的元素，则无法保证找到的是哪一个。 参数： a - 要搜索的数组 key - 要搜索的值 返回： 如果它包含在数组中，则返回搜索键的索引；否则返回 (-(*插入点*) - 1)。*插入点* 被定义为将键插入数组的那一点：即第一个大于此键的元素索引，如果数组中的所有元素都小于指定的键，则为 a.length。注意，这保证了当且仅当此键被找到时，返回的值将 &gt;= 0。 copyOf使用老数组创建一个新的数组。同时拷贝数据。 二维数组和多维数组二维数组是否可以排序？不能，会报ClassCastException异常。 函数为什么要创建函数？ 一个函数代表了一个功能。功能最好单一，独立，不可拆分。 可以重复使用 调用方便 结构清晰，层次更明确，修改容易。 可以利用函数将多层的循环变成多个一层的循环。 为了给我们的程序分模块。 “","tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"multithreading","date":"2016-12-10T14:50:56.000Z","path":"2016/12/10/multithreading/","text":"多线程参考进程和线程区别 1.定义进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位. 一个进程中可以包含若干个线程，它们可以利用进程所拥有的资源。在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源. 2.关系 一个线程可以创建和撤销另一个线程;同一个进程中的多个线程之间可以并发执行. 相对进程而言，线程是一个更加接近于执行体的概念，它可以与同进程中的其他线程共享数据，但拥有自己的栈空间，拥有独立的执行序列。 3.区别 进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。 1) 简而言之,一个程序至少有一个进程,一个进程至少有一个线程. 2) 线程的划分尺度小于进程，使得多线程程序的并发性高。 3) 另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。 4) 线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。 5) 从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。 4.优缺点 线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。同时，线程适合于在SMP机器上运行，而进程则可以跨机器迁移。 线程和进程一样分为五个阶段：创建、就绪、运行、阻塞、终止。","tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"first","date":"2016-12-10T11:22:57.000Z","path":"2016/12/10/first/","text":"","tags":[{"name":"learning","slug":"learning","permalink":"http://yoursite.com/tags/learning/"}]}]